executor_environment: 
  interface: B2YamlInterpreter
  config:
    bucket_name: yaml_bucket
    endpoint_url: http://localhost:9000
    access_key_id: minioadmin
    secret_access_key: minioadmin
    prefix: jennifer
plan:
  - step: |-
      Here is the task:
      ```
      {{ task }}
      ```

      You have to complete the task by writing yaml file with two fields body and variables.
      
      In the body field insert text to complete the task. You can use variable names as placeholders for the values that will be computed in the variables field.
      In the variables capture any text in the body field that must be referenced because it is changing value in the real world or it is not known at the time of writing the yaml file.

      The body field should be text and the variables field must be a list.

      Write the yaml file to complete the task.
    out_id: result_file
    action: final_answer
  - step: |-  
      Here is the task:
      ```
      {{task}}
      ```

      You came up with the following yaml result file:
      ```
      {{ result_file }}
      ```

      Please list the variable values to insert in the result file.
    out: one_to_many
    out_id: variable_list
    action: skip
    return_type: list
  - step: |-
      Here is the task:
      ```
      {{task}}
      ```

      Here are the text files in the datalake:
      ````
      {%- for file in files %}
        - {{ file.name }}: {{ file.description }}
      {%- endfor %}
      ````

      {%- if mcp_servers and mcp_servers.values()|length > 0 %}
      These functions are used to complete a step efficiently.
      {%- for server in mcp_servers.values() %}
        - {{ server.name }}: {{ server.description }}
            Takes inputs: {{server.inputs}}
            Returns an output of type: {{server.output_type}}
      {%- endfor %}
      {%- endif %}

      You came up with the following result file:

      ```
      {{ result_file }}
      ```

      Please write a detailed description of the {{ variable_name }} variable with clear instructions on how to leverage functions and files
      in the datalake to compute the value of the variable.
    out_id: variable_description
    action: skip
  - step: |-
      Here is the variable description:
      ```
      {{ variable_description }}
      ```

      Here are the text files in the datalake:
      ````
      {%- for file in files %}
        - File: : {{ file.name }}
          Description: {{ file.description }}
      {%- endfor %}
      ````

      {%- if mcp_servers and mcp_servers.values()|length > 0 %}
      These functions are used to complete a step efficiently.
      {%- for server in mcp_servers.values() %}
        - {{ server.name }}: {{ server.description }}
            Takes inputs: {{server.inputs}}
            Returns an output of type: {{server.output_type}}
      {%- endfor %}
      {%- endif %}

      You have to write a yaml file making use of function calls and file names stated as yaml variables to compute the value of the {{ variable_name }} variable.
    out_id: variable_yaml
