
executor_environment: 
  interface: LocalPostgresInterpreter
  config:
    host: 127.0.0.1
    port: 5432
    dbname: core
    user: postgres
    password: root
    additional_authorized_imports: "*"
judge: |-
    You are the supervisor of an AI agent who writes code and the agent is trying to solve a task. 
    
    Task: 
    {{task}}
    
    Code: 
    {{code}}
    
    Observations: 
    {{observations}}

    You have to take into consideration results from previously completed steps:

    {%- for storage in storage_data %}

      - Step: {{ storage.step }}

        {{ storage.storage }}

    {%- endfor %}

    {%- if mcp_servers and mcp_servers.values()|length > 0 %}
    These functions are used to complete a step efficiently.
    {%- for server in mcp_servers.values() %}
    - {{ server.name }}: {{ server.description }}
        Takes inputs: {{server.inputs}}
        Returns an output of type: {{server.output_type}}
    {%- endfor %}
    {%- endif %}

    You must evaluate the agent's code and provide feedback on the following aspects:
    1. Correctness: Is the code correct and does it solve the task?
    2. Efficiency: Is the code efficient and does it follow best practices?

    You must make a decision by starting with a hashtag:
    1. #approve: If the code is correct, efficient and completes the task. Please specify why the code output does not miss any edge cases and it doesn't have issues in the output.
    2. #fail: If the code is incorrect, inefficient, does not solve the task, or has issues in the output. Please specify why the code cannot be improved to solve the task.
    3. #rethink: If the task can be rephrased for better outcome. Please provide guidance on how to rethink the task.

    Now begin!
plan:
  - step: |-
      Here is the task:
      ```
      {{task}}
      ```

      Here is the database description:
      ```
      {{ database.description }}
      ```
      
      Here are the tables in the database:
      ````
      {%- for table in database.tables %}
        - Table: {{ table.name }}
          Columns:
            {%- for column in table.columns %}
            - {{ column.name }}: {{ column.description }}
            {%- endfor %}
      {%- endfor %}
      ````
      
      You have to solve the task by computing a result table created using existing tables in the database.

      Just assume all the required views that can have transformed column values from existing table values are already created in the database.

      You have to write a select SQL statement to compute the result table using the available views.
    out_id: result_table
  - step: |-  

      Here is the task:
      ```
      {{task}}
      ```

      Here is the database description:
      ```
      {{ database.description }}
      ```

      Here are the tables in the database:
      ````
      {%- for table in database.tables %}
        - Table: {{ table.name }}
          Columns:
            {%- for column in table.columns %}
            - {{ column.name }}: {{ column.description }}
            {%- endfor %}
      {%- endfor %}
      ````

      You came up with the following result table:

      ```
      {{ result_table }}
      ```

      Please list the views that are assumed to be created in the database to compute the result table.
    out: one_to_many
    out_id: view_table
  - step: |-
      Create a description for the {{ view_table }} view which has clear instructions on how to compute the view using existing table.
    out_id: view_table_description
  - step: |-
      Write the SQL statement to create the {{ view_table }} view.

      {{ view_table_description }}